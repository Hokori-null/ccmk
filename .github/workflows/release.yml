name: Build and Release

on:
  push:
    tags:
      - "v*.*.*" # 当推送符合模式v*.*.*的标签时触发工作流
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }} # 定义作业运行的操作系统
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest] # 定义操作系统矩阵
        arch: [x86_64, aarch64] # 定义架构矩阵

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # 检出仓库代码

      - name: Set up Rust
        uses: actions-rs/toolchain@v1 # 设置Rust工具链
        with:
          toolchain: stable # 使用稳定版Rust工具链
          profile: minimal # 使用最小化配置文件
          override: true # 覆盖任何现有的Rust工具链设置
          target: ${{ matrix.arch }}-${{ matrix.os == 'windows-latest' && 'pc-windows-msvc' || matrix.os == 'macos-latest' && 'apple-darwin' || 'unknown-linux-gnu' }}

      - name: Install cross-compilation dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build project
        run: cargo build --release --target ${{ matrix.arch }}-${{ matrix.os == 'windows-latest' && 'pc-windows-msvc' || matrix.os == 'macos-latest' && 'apple-darwin' || 'unknown-linux-gnu' }}

      # 准备构建产物
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            cp target/${{ matrix.arch }}-pc-windows-msvc/release/ccmk.exe artifacts/
          else
            cp target/${{ matrix.arch }}-${{ matrix.os == 'macos-latest' && 'apple-darwin' || 'unknown-linux-gnu' }}/release/ccmk artifacts/
          fi

      # 上传构建产物
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ccmk-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/

  release:
    runs-on: ubuntu-latest # 定义作业运行在Ubuntu系统上
    needs: build # 依赖于build作业

    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # 检出仓库代码

      # 下载所有构建产物
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # 准备发布资产
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -name "ccmk*" | while read file; do
            platform=$(echo $file | cut -d/ -f2 | sed 's/ccmk-//g')
            if [[ $file == *".exe" ]]; then
              cp "$file" "release-assets/ccmk-$platform.exe"
            else
              cp "$file" "release-assets/ccmk-$platform"
            fi
          done

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1 # 使用更现代的GitHub release action
        with:
          files: release-assets/*
          tag_name: ${{ github.ref_name }} # 使用推送的标签名
          name: Release ${{ github.ref_name }} # 使用推送的标签名作为发布名称
          body: |
            CCMK Release ${{ github.ref_name }}
            
            Automated release for CCMK project.
          draft: false # 是否为草稿
          prerelease: false # 是否为预发布
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 使用GitHub令牌进行身份验证
