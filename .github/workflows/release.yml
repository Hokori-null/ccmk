name: Release

on:
  push:
    tags:
        - 'v[0-9]+.[0-9]+.[0-9]+'          # 匹配 vX.Y.Z 格式
        - '[0-9]+.[0-9]+.[0-9]+'           # 匹配 X.Y.Z 格式
        - 'v[0-9]+.[0-9]+.[0-9]+-[0-9]+'   # 匹配 vX.Y.Z-N 格式
        - '[0-9]+.[0-9]+.[0-9]+-[0-9]+'

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
            binary_name: ccmk
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
            binary_name: ccmk
          
          # Windows builds
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
            binary_name: ccmk.exe
          - os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
            binary_name: ccmk.exe
          
          # macOS builds (ARM only)
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            binary_name: ccmk

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools for Linux ARM
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64' }}

      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p release
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/
          else
            cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/
          fi
          cd release
          tar -czvf ccmk-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ccmk-${{ matrix.target }}
          path: release/ccmk-${{ matrix.target }}.tar.gz

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: release

      - name: Prepare release assets
        run: |
          mkdir -p assets
          find release -name "*.tar.gz" -exec cp {} assets/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}